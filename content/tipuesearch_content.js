var tipuesearch = {"pages": [{'title': 'First', 'text': '\n 國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n \n 個人倉儲: https://github.com/mdecp2024/hw-41323125 \n 個人網站: https://mdecp2024.github.io/hw-41323125/ \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'First.html'}, {'title': 'about', 'text': '個人倉儲: https://github.com/mdecp2024/hw-41323125 \n 個人網站: https://mdecp2024.github.io/hw-41323125/ \n', 'tags': '', 'url': 'about.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'W10', 'text': '第一題影片連結: \n 第二題影片連結: \n 第三題影片連結: \n', 'tags': '', 'url': 'W10.html'}, {'title': 'w11_hw', 'text': 'import math\n\ndef draw_solid_circle():\n    size = 10  # 區域的大小為 10x10\n    radius = size // 2  # 圓的半徑\n    center = (radius, radius)  # 圓的中心位置 (5, 5)\n\n    for y in range(size):\n        for x in range(size):\n            # 計算與圓心的距離\n            distance = math.sqrt((x - center[0])**2 + (y - center[1])**2)\n            # 若距離小於等於半徑，則列印 \'*\'\n            if distance <= radius:\n                print("*", end="")\n            else:\n                print(" ", end="")\n        print()  # 換行\n\n# 執行函數\ndraw_solid_circle()\n \n \n 影片連結: \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每一格的 pixel 數\ngs = 20\n\n# Canvas 上下文\nctx = canvas.getContext("2d")\n\ndef dRect(lux, luy, w, h, s=1, c=\'#ff0000\'):\n    ctx.lineWidth = s\n    ctx.strokeStyle = c\n    ctx.beginPath()\n    ctx.rect(lux, luy, w, h)\n    ctx.stroke()\n\ndef grid(width, height, grid_pix):\n    # 繪製網格\n    for i in range(width):\n        for j in range(height):\n            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")\n\ndef fill(x, y, color):\n    # 填充指定格子\n    ctx.fillStyle = color\n    ctx.fillRect(x * gs, y * gs, gs, gs)\n\ndef draw_solid_circle(cx, cy, radius):\n    # cx, cy 是圓心座標（以格子為單位）\n    # radius 是圓的半徑（以格子為單位）\n    for i in range(10):  # x 軸格子\n        for j in range(10):  # y 軸格子\n            # 計算格子中心與圓心的距離\n            center_x = i + 0.5\n            center_y = j + 0.5\n            distance = ((center_x - cx)**2 + (center_y - cy)**2)**0.5\n            if distance <= radius:  # 判斷是否在圓內\n                fill(i, j, "black")\n\n# 繪製網格\ngrid(10, 10, gs)\n\n# 繪製實心圓形\ndraw_solid_circle(5, 5, 3)  # 圓心在 (5, 5)，半徑為 3 格 \n \n 影片連結: \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12', 'text': 'n = 5  # 總共的行數\nspace = \'_\'\n\'\'\'\nfor i in range(n):  # 對於每一行\n    # 印出空格\n    print(space * (n - i - 1), end=\'\') \n\'\'\'\n"""\nfor i in range(n):  # 對於每一行\n    # 印出空格\n    print(space * (n - i - 1), end=\'\') \n"""\nfor i in range(n):  # 對於每一行\n    # 印出空格\n    #print(space * (n - i - 1), end=\'\') \n    print("目前數字"+ str(i))  # 每行印出 2*i + 1 個星號 \n \n \n \n', 'tags': '', 'url': 'w12.html'}, {'title': 'w12_hw', 'text': '第一題: string_input_print \n \xa0 \xa0 \xa0 \xa0 \xa0 詢問(你叫什麼名字？/你來自哪裡？)並且回應(你好/真棒)，畫出一隻貓。\xa0 \n # 询问用户的名字\nname = input("你叫什麼名字？ ")\n\n# 询问用户的所在地\nlocation = input("你來自哪裡？ ")\n\n# 打印回应\nprint(f"\\n你好, {name}！")\nprint(f"真棒！你來自 {location}！")\n\n# 打印一只简单的 ASCII 猫\ncat_art = r"""\n /\\_/\\  \n( o.o ) \n > ^ <\n"""\n\nprint(cat_art) \n \n 第二題: variables \n \xa0 \xa0 \xa0 \xa0 \xa0 詢問(你叫什麼名字？/你最喜歡的食物是什麼？) 之後使用字串連接列印回答：("嗨！我的名字是 " + name)/("我最喜歡的食物是 " + favorite_food)/(name + "的最喜歡的食物是 " + favorite_food) \n # 询问用户的名字\nname = input("你叫什麼名字？ ")\n\n# 询问用户最喜欢的食物\nfavorite_food = input("你最喜歡的食物是什麼？ ")\n\n# 使用字符串连接输出回答\nprint("嗨！我的名字是 " + name)\nprint("我最喜歡的食物是 " + favorite_food)\nprint(name + " 的最喜歡的食物是 " + favorite_food)\n \n \n 第三題:list_if_in_else \n \xa0 \xa0 \xa0 \xa0 \xa0 查詢書店書籍,如果有就顯示( "是的，我們有賣這本書！" ),否則就顯示( "抱歉，我們沒有賣這本書。" )。 \n # 書店的書籍列表\nbooks = ["哈利波特", "三國演義", "紅樓夢", "小王子", "百年孤獨"]\n\n# 讓用戶輸入想查詢的書名\nsearch_book = input("請問你想找什麼書？ ")\n\n# 使用 if-in-else 的方式檢查書籍是否在列表中\nif search_book in books:\n    print("是的，我們有賣這本書！")\nelse:\n    print("抱歉，我們沒有賣這本書。") \n \n \n \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13_hw', 'text': '\n \n \n \n  啟動 Brython  \n \n \n \n \n \n \n \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w15', 'text': '從 1 累加到 100 \n def run_addition():\n    total = sum(range(1, 101))\n    print("從 1 累加到 100 的總和是:", total)\n    alert("從 1 累加到 100 的總和是: " + str(total))\n \n addto \n def addto(start, end):\n    total = sum(range(start, end + 1))\n    return total\n\ndef run_addition():\n    total = addto(1, 100)\n    print("從 1 累加到 100 的總和是:", total)\n    alert("從 1 累加到 100 的總和是: " + str(total)) \n add_only_even \n def addto(start, end):\n    total = sum(range(start, end + 1))\n    return total\n\ndef add_only_even(start, end):\n    # 只累加偶數\n    total = sum(i for i in range(start, end + 1) if i % 2 == 0)\n    return total\n\ndef run_addition():\n    total = addto(1, 100)\n    print("從 1 累加到 100 的總和是:", total)\n    alert("從 1 累加到 100 的總和是: " + str(total))\n\n    even_total = add_only_even(1, 100)\n    print("從 1 累加到 100 只包含偶數的總和是:", even_total)\n    alert("從 1 累加到 100 只包含偶數的總和是: " + str(even_total)) \n add_avoid_8 \n def addto(start, end):\n    total = sum(range(start, end + 1))\n    return total\n\ndef add_only_even(start, end):\n    # 只累加偶數\n    total = sum(i for i in range(start, end + 1) if i % 2 == 0)\n    return total\n\ndef add_avoid_8(start, end):\n    # 只累加不包含 "8" 的整數\n    total = sum(i for i in range(start, end + 1) if \'8\' not in str(i))\n    return total\n\ndef run_addition():\n    total = addto(1, 100)\n    print("從 1 累加到 100 的總和是:", total)\n    alert("從 1 累加到 100 的總和是: " + str(total))\n\n    even_total = add_only_even(1, 100)\n    print("從 1 累加到 100 只包含偶數的總和是:", even_total)\n    alert("從 1 累加到 100 只包含偶數的總和是: " + str(even_total))\n\n    avoid_8_total = add_avoid_8(1, 100)\n    print("從 1 累加到 100 避開包含數字 8 的總和是:", avoid_8_total)\n    alert("從 1 累加到 100 避開包含數字 8 的總和是: " + str(avoid_8_total)) \n 隨堂考  add_avoid_3_and_8 \n def add_avoid_3_and_8(start, end):\n    # 累加範圍內不包含數字 "3" 或 "8" 的數字\n    total = sum(i for i in range(start, end + 1) if \'3\' not in str(i) and \'8\' not in str(i))\n    return total\n\n# 直接計算並顯示結果\ntotal = sum(range(1, 101))\nprint("從 1 累加到 100 的總和是:", total)\n\navoid_3_and_8_total = add_avoid_3_and_8(1, 100)\nprint("從 1 累加到 100 避開包含數字 3 或 8 的總和是:", avoid_3_and_8_total) \n 答案:5050 \n', 'tags': '', 'url': 'w15.html'}, {'title': 'w14_ex', 'text': '\n \n \n \n  啟動 Brython  \n \n \n \n  定義顯示 canvas 的 div 元素  \n \n \n \n \n', 'tags': '', 'url': 'w14_ex.html'}, {'title': 'HW 2', 'text': '', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'w16_exam1', 'text': '影片: https://youtu.be/8wfMsMqC1tA \n \n from browser import html\nfrom browser import document as doc\nimport math\n\n# 初始化畫布\ndef initialize_canvas():\n    canvas = html.CANVAS(width=600, height=600)\n    brython_div = doc["brython_div1"]\n    brython_div <= canvas\n    ctx = canvas.getContext("2d")\n    ctx.fillStyle = \'white\'\n    ctx.fillRect(0, 0, 600, 600)  # 填充整個畫布為白色\n    return canvas, ctx\n\n# 繪製六邊形\ndef draw_hexagon(ctx, x, y, size, color):\n    """繪製六邊形"""\n    ctx.beginPath()\n    for i in range(6):\n        angle = math.pi / 3 * i\n        x_pos = x + size * math.cos(angle)\n        y_pos = y + size * math.sin(angle)\n        if i == 0:\n            ctx.moveTo(x_pos, y_pos)\n        else:\n            ctx.lineTo(x_pos, y_pos)\n    ctx.closePath()\n    ctx.fillStyle = color\n    ctx.fill()\n\n# 繪製菱形\ndef draw_diamond(ctx, x, y, width, height, color):\n    """繪製菱形"""\n    ctx.beginPath()\n    ctx.moveTo(x, y - height / 2)\n    ctx.lineTo(x + width / 2, y)\n    ctx.lineTo(x, y + height / 2)\n    ctx.lineTo(x - width / 2, y)\n    ctx.closePath()\n    ctx.fillStyle = color\n    ctx.fill()\n\n# 繪製等腰三角形\ndef draw_isosceles_triangle(ctx, x, y, base, height, color):\n    """繪製等腰三角形"""\n    half_base = base / 2\n    # 三角形的三個頂點\n    ctx.beginPath()\n    ctx.moveTo(x - half_base, y)  # 左下角\n    ctx.lineTo(x + half_base, y)  # 右下角\n    ctx.lineTo(x, y - height)     # 上頂點\n    ctx.closePath()\n    ctx.fillStyle = color\n    ctx.fill()\n\n# 繪製圓形\ndef draw_circle(ctx, x, y, radius, color):\n    """繪製圓形"""\n    ctx.beginPath()\n    ctx.arc(x, y, radius, 0, 2 * math.pi)\n    ctx.fillStyle = color\n    ctx.fill()\n\n# 繪製矩形\ndef draw_rectangle(ctx, x, y, width, height, color):\n    """繪製矩形"""\n    ctx.beginPath()\n    ctx.rect(x, y, width, height)\n    ctx.fillStyle = color\n    ctx.fill()\n\n# 標註原點\ndef mark_origin(ctx, x, y):\n    """標註原點 (31, 25)"""\n    ctx.fillStyle = "black"\n    ctx.font = "16px Arial"\n    ctx.fillText(f"({x}, {y})", x + 10, y - 10)\n\n# 繪製坐標軸 (從原點 (31, 25) 開始)\ndef draw_axes(ctx, origin_x, origin_y):\n    """繪製 X 軸和 Y 軸，並標示正方向"""\n    # X 軸 (向右為正)\n    ctx.beginPath()\n    ctx.moveTo(origin_x, origin_y)  # 從原點 (31, 25) 開始\n    ctx.lineTo(600, origin_y)  # 直到畫布的右側 (X=600)，Y 不變\n    ctx.lineWidth = 2  # 設定線條寬度\n    ctx.strokeStyle = "black"\n    ctx.stroke()\n\n    # Y 軸 (向下為正)\n    ctx.beginPath()\n    ctx.moveTo(origin_x, origin_y)  # 從原點 (31, 25) 開始\n    ctx.lineTo(origin_x, 600)  # 直到畫布的下側 (Y=600)，X 不變\n    ctx.stroke()\n\n    # 標註 X 軸的箭頭 (向右為正)\n    ctx.beginPath()\n    ctx.moveTo(590, origin_y - 10)  # X 軸末端的箭頭起點\n    ctx.lineTo(600, origin_y)\n    ctx.lineTo(590, origin_y + 10)\n    ctx.stroke()\n\n    # 標註 Y 軸的箭頭 (向下為正)\n    ctx.beginPath()\n    ctx.moveTo(origin_x - 10, 590)  # Y 軸末端的箭頭起點\n    ctx.lineTo(origin_x, 600)\n    ctx.lineTo(origin_x + 10, 590)\n    ctx.stroke()\n\n    # 標註 X 軸的文字\n    ctx.fillStyle = "black"\n    ctx.font = "16px Arial"\n    ctx.fillText("X", 570, origin_y + 20)  # 標註 X 軸\n\n    # 標註 Y 軸的文字，移動到箭頭右側\n    ctx.fillText("Y", origin_x + 15, 600 - 30)  # 移動 Y 標註位置\n\n# 繪製場景\ndef draw_scene():\n    """繪製場景"""\n    canvas, ctx = initialize_canvas()\n\n    origin_x, origin_y = 31, 25  # 原點坐標 (31, 25)\n\n    # 標註原點 (31, 25)\n    mark_origin(ctx, origin_x, origin_y)\n\n    # 繪製坐標軸 (從原點 (31, 25) 開始)\n    draw_axes(ctx, origin_x, origin_y)\n\n    # 六邊形的大小\n    hexagon_size = 50\n\n    # 計算六邊形的中心點 X 座標，使最左側頂點對齊於 X = 31\n    hexagon_x = 31 + hexagon_size  # 六邊形的中心 X 座標\n\n    # 繪製六邊形\n    draw_hexagon(ctx, hexagon_x, 180, hexagon_size, "orange")\n\n    # 繪製菱形，調整位置\n    diamond_x = 180\n    draw_diamond(ctx, diamond_x, 180, 80, 120, "teal")\n\n    # 繪製縮小的等腰三角形，放置於菱形底部對齊但不重疊，調整位置\n    base = 60  # 三角形底邊長度\n    height = 50  # 根據底邊長度調整高度\n    triangle_x = diamond_x + 60 / 2 + 10\n    draw_isosceles_triangle(ctx, triangle_x, 180 + 60, base, height, "lightpink")\n\n    # 繪製圓形，調整位置\n    circle_x = 280\n    draw_circle(ctx, circle_x, 180, 50, "magenta")\n\n    # 繪製正方形，調整位置\n    square_x = 340\n    draw_rectangle(ctx, square_x, 140, 80, 80, "yellow")\n\n    # 繪製矩形，調整位置\n    rectangle_x = 440\n    draw_rectangle(ctx, rectangle_x, 160, 100, 40, "blue")\n\n# 開始繪製\ndraw_scene() \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  定義顯示 canvas 的 div 元素  \n \n \n \n', 'tags': '', 'url': 'w16_exam1.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束  \n \n  ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'Brython.html'}]};