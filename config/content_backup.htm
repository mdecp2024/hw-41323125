<h1>First</h1>
<p></p>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41323125">https://github.com/mdecp2024/hw-41323125</a></p>
<p>個人網站:<a class="Link--inTextBlock" href="https://mdecp2024.github.io/hw-41323125/">https://mdecp2024.github.io/hw-41323125/</a></p>
<p></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h3>W10</h3>
<p>第一題影片連結:<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/CF6LP-JjR3g" width="560"></iframe></p>
<p>第二題影片連結:<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/bZ27NRUGXrI" width="560"></iframe></p>
<p>第三題影片連結:<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/l_BtxThqh-A" width="560"></iframe></p>
<h2>w11_hw</h2>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import math

def draw_solid_circle():
    size = 10  # 區域的大小為 10x10
    radius = size // 2  # 圓的半徑
    center = (radius, radius)  # 圓的中心位置 (5, 5)

    for y in range(size):
        for x in range(size):
            # 計算與圓心的距離
            distance = math.sqrt((x - center[0])**2 + (y - center[1])**2)
            # 若距離小於等於半徑，則列印 '*'
            if distance &lt;= radius:
                print("*", end="")
            else:
                print(" ", end="")
        print()  # 換行

# 執行函數
draw_solid_circle()
</pre>
<p></p>
<p>影片連結:<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/0DsPceMhGtU" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 每一格的 pixel 數
gs = 20

# Canvas 上下文
ctx = canvas.getContext("2d")

def dRect(lux, luy, w, h, s=1, c='#ff0000'):
    ctx.lineWidth = s
    ctx.strokeStyle = c
    ctx.beginPath()
    ctx.rect(lux, luy, w, h)
    ctx.stroke()

def grid(width, height, grid_pix):
    # 繪製網格
    for i in range(width):
        for j in range(height):
            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")

def fill(x, y, color):
    # 填充指定格子
    ctx.fillStyle = color
    ctx.fillRect(x * gs, y * gs, gs, gs)

def draw_solid_circle(cx, cy, radius):
    # cx, cy 是圓心座標（以格子為單位）
    # radius 是圓的半徑（以格子為單位）
    for i in range(10):  # x 軸格子
        for j in range(10):  # y 軸格子
            # 計算格子中心與圓心的距離
            center_x = i + 0.5
            center_y = j + 0.5
            distance = ((center_x - cx)**2 + (center_y - cy)**2)**0.5
            if distance &lt;= radius:  # 判斷是否在圓內
                fill(i, j, "black")

# 繪製網格
grid(10, 10, gs)

# 繪製實心圓形
draw_solid_circle(5, 5, 3)  # 圓心在 (5, 5)，半徑為 3 格</pre>
<p></p>
<p>影片連結:<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/kSWQfLlArKo" width="560"></iframe></p>
<h2>w12</h2>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">n = 5  # 總共的行數
space = '_'
'''
for i in range(n):  # 對於每一行
    # 印出空格
    print(space * (n - i - 1), end='') 
'''
"""
for i in range(n):  # 對於每一行
    # 印出空格
    print(space * (n - i - 1), end='') 
"""
for i in range(n):  # 對於每一行
    # 印出空格
    #print(space * (n - i - 1), end='') 
    print("目前數字"+ str(i))  # 每行印出 2*i + 1 個星號</pre>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/8eqGasqKWyE" width="560"></iframe></p>
<p></p>
<p></p>
<h2>w12_hw</h2>
<p>第一題:<span>string_input_print</span></p>
<p>          詢問(你叫什麼名字？/你來自哪裡？)並且回應(你好/真棒)，畫出一隻貓。 </p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 询问用户的名字
name = input("你叫什麼名字？ ")

# 询问用户的所在地
location = input("你來自哪裡？ ")

# 打印回应
print(f"\n你好, {name}！")
print(f"真棒！你來自 {location}！")

# 打印一只简单的 ASCII 猫
cat_art = r"""
 /\_/\  
( o.o ) 
 &gt; ^ &lt;
"""

print(cat_art)</pre>
<p></p>
<p>第二題:<span>variables</span></p>
<p><span>          詢問(你叫什麼名字？/你最喜歡的食物是什麼？)</span><span>之後使用字串連接列印回答：("嗨！我的名字是 " + name)/("我最喜歡的食物是 " + favorite_food)/(name + "的最喜歡的食物是 " + favorite_food)</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 询问用户的名字
name = input("你叫什麼名字？ ")

# 询问用户最喜欢的食物
favorite_food = input("你最喜歡的食物是什麼？ ")

# 使用字符串连接输出回答
print("嗨！我的名字是 " + name)
print("我最喜歡的食物是 " + favorite_food)
print(name + " 的最喜歡的食物是 " + favorite_food)
</pre>
<p></p>
<p>第三題:list_if_in_else</p>
<p><span>          查詢書店書籍,如果有就顯示(</span><span class="hljs-string">"是的，我們有賣這本書！"</span><span>),否則就顯示(</span><span class="hljs-string">"抱歉，我們沒有賣這本書。"</span><span>)。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 書店的書籍列表
books = ["哈利波特", "三國演義", "紅樓夢", "小王子", "百年孤獨"]

# 讓用戶輸入想查詢的書名
search_book = input("請問你想找什麼書？ ")

# 使用 if-in-else 的方式檢查書籍是否在列表中
if search_book in books:
    print("是的，我們有賣這本書！")
else:
    print("抱歉，我們沒有賣這本書。")</pre>
<p><br/><br/></p>
<p></p>
<p></p>
<h2>w13_hw</h2>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import document as doc, html

def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    # 創建一個 canvas 元素，並設置它的寬度和高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    # 獲取指定 id 的 DOM 元素，將 canvas 元素加到網頁中
    brython_div = doc[id]
    brython_div <= canvas  # 將 canvas 加入網頁的 div 中
    # 獲取 canvas 的 2D 上下文，用於繪圖操作
    ctx = canvas.getContext("2d")
    return canvas, ctx  # 返回畫布和上下文

def draw_squares_and_diagonal(ctx):
    # 定義正方形和對角線的參數
    square_side = 200  # 正方形的邊長
    radius = square_side / (2**0.5)  # 外接圓的半徑

    # 第一個紅色正方形
    ctx.beginPath()
    ctx.rect(50, 50, square_side, square_side)
    ctx.strokeStyle = "red"
    ctx.lineWidth = 2
    ctx.stroke()

    # 第一個正方形的外接圓
    ctx.beginPath()
    ctx.arc(50 + square_side / 2, 50 + square_side / 2, radius, 0, 2 * 3.14159)
    ctx.strokeStyle = "green"
    ctx.lineWidth = 2
    ctx.stroke()

    # 第二個紅色正方形（向右下平移）
    ctx.beginPath()
    ctx.rect(150, 150, square_side, square_side)
    ctx.strokeStyle = "red"
    ctx.lineWidth = 2
    ctx.stroke()

    # 第二個正方形的外接圓
    ctx.beginPath()
    ctx.arc(150 + square_side / 2, 150 + square_side / 2, radius, 0, 2 * 3.14159)
    ctx.strokeStyle = "green"
    ctx.lineWidth = 2
    ctx.stroke()

    # 藍色對角線（從第一個正方形左上角到第二個正方形右下角）
    ctx.beginPath()
    ctx.moveTo(50, 50)
    ctx.lineTo(350, 350)
    ctx.strokeStyle = "blue"
    ctx.lineWidth = 2
    ctx.stroke()

# 初始化畫布並繪製圖形
canvas, ctx = initialize_canvas()
draw_squares_and_diagonal(ctx)
</script>
</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import math

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以容納圓形
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")

grid_size_coarse = 10  # 粗略掃描的格點大小（10像素）
grid_size_fine = 1     # 細掃描的格點大小（1像素）
point_size = max(int(grid_size_fine / 2), 1)  # 點的大小
ctx.lineWidth = 1

# 設置畫布背景為白色
ctx.fillStyle = 'white'
ctx.fillRect(0, 0, 600, 600)  # 填充整個畫布為白色

# 定義判定函式
def point_in_circle1(x, y):
    cx, cy, r = 200, 200, 141.4  # 第一個圓的圓心和半徑
    return (x - cx)**2 + (y - cy)**2 < r**2

def point_in_square1(x, y):
    return 100 <= x <= 300 and 100 <= y <= 300

def point_in_circle2(x, y):
    cx, cy, r = 300, 300, 141.4  # 第二個圓的圓心和半徑
    return (x - cx)**2 + (y - cy)**2 < r**2

def point_in_square2(x, y):
    return 200 <= x <= 400 and 200 <= y <= 400

# 判定點是否在直線段上 (這裡的直線段為從 (100, 100) 到 (300, 300))
def point_on_line_segment(x, y):
    return 100 <= x <= 300 and 100 <= y <= 300 and y == x

def point_above_line(x, y):
    return y < x  # 因為直線的斜率是1，所以判定 y < x 即為上方

def point_below_line(x, y):
    return y > x  # 直線下方是 y > x

# 根據區域顏色來判定顏色
def get_region_color(x, y):
    if point_in_circle1(x, y):
        # 1. 位於第一個圓內部
        if point_in_square1(x, y):
            return 'rgba(0, 255, 0, 0.5)'  # 半透明綠色
        elif x < 100:  # 圓內且在正方形1的左邊
            return 'rgba(0, 0, 255, 0.5)'  # 半透明藍色
        elif x > 300:  # 圓內且在正方形1的右邊
            return 'rgba(255, 255, 0, 0.5)'  # 半透明黃色
        elif y < 100:  # 圓內且在正方形1的上面
            return 'rgba(128, 0, 128, 0.5)'  # 半透明紫色
        elif y > 300:  # 圓內且在正方形1的下面
            return 'rgba(255, 165, 0, 0.5)'  # 半透明橙色
        else:
            return 'rgba(255, 192, 203, 0.5)'  # 半透明粉紅色
    elif point_in_circle2(x, y):
        # 2. 位於第二個圓內部
        if point_in_square2(x, y):
            return 'rgba(255, 0, 0, 0.5)'  # 半透明紅色
        elif x < 200:  # 圓內且在正方形2的左邊
            return 'rgba(0, 255, 255, 0.5)'  # 半透明青色
        elif x > 400:  # 圓內且在正方形2的右邊
            return 'rgba(255, 0, 255, 0.5)'  # 半透明品紅色
        elif y < 200:  # 圓內且在正方形2的上面
            return 'rgba(139, 69, 19, 0.5)'  # 半透明棕色
        elif y > 400:  # 圓內且在正方形2的下面
            return 'rgba(0, 128, 128, 0.5)'  # 半透明深青色
        else:
            return 'rgba(238, 130, 238, 0.5)'  # 半透明紫羅蘭色
    elif point_on_line_segment(x, y):
        # 3. 位於對角線上
        return 'rgba(0, 0, 0, 0.5)'  # 半透明黑色
    elif point_above_line(x, y):
        # 4. 位於對角線上方
        return 'rgba(173, 216, 230, 0.5)'  # 半透明淡藍色
    elif point_below_line(x, y):
        # 5. 位於對角線下方
        return 'rgba(144, 238, 144, 0.5)'  # 半透明淺綠色
    else:
        return None  # 兩個圓之外的區域不進行著色

# 扫描每 10 像素的格點並上色（粗略掃描）
def scan_and_draw_coarse():
    for x in range(0, 600, grid_size_coarse):  # 遍歷畫布範圍，從左到右
        for y in range(0, 600, grid_size_coarse):  # 從上到下
            color = get_region_color(x, y)  # 獲取當前點的區域顏色
            if color:  # 只有當顏色不為 None（即點在圓內）時才繪製
                # 繪製點
                ctx.fillStyle = color
                ctx.beginPath()
                ctx.arc(x, y, point_size, 0, 2 * math.pi)  # 點的半徑設為 5
                ctx.fill()

# 扫描每 1 像素的格點並上色（細掃描）
def scan_and_draw_fine():
    for x in range(0, 600, grid_size_fine):  # 遍歷畫布範圍，從左到右
        for y in range(0, 600, grid_size_fine):  # 從上到下
            color = get_region_color(x, y)  # 獲取當前點的區域顏色
            if color:  # 只有當顏色不為 None（即點在圓內）時才繪製
                # 繪製點
                ctx.fillStyle = color
                ctx.beginPath()
                ctx.arc(x, y, point_size, 0, 2 * math.pi)  # 點的半徑設為 5
                ctx.fill()

# 先進行粗略掃描，再進行細掃描
scan_and_draw_coarse()
scan_and_draw_fine()
</script>
</p>
<h2>w15</h2>
<p><a href="https://mdecp2024.github.io/hw-41323125/content/Brython.html?src=https://gist.githubusercontent.com/41323125/474939d1bb5b9aad5b471953e1cdceb3/raw/01d31745dd1e45ec60878be798d8ea18d329afee/w15">從 1 累加到 100</a></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">def run_addition():
    total = sum(range(1, 101))
    print("從 1 累加到 100 的總和是:", total)
    alert("從 1 累加到 100 的總和是: " + str(total))
</pre>
<p><a href='/get_page/w15/def addto(start, end):     total = sum(range(start, end + 1))     return total  def run_addition():     total = addto(1, 100)     print("從 1 累加到 100 的總和是:", total)     alert("從 1 累加到 100 的總和是: " + str(total))'>addto</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(start, end):
    total = sum(range(start, end + 1))
    return total

def run_addition():
    total = addto(1, 100)
    print("從 1 累加到 100 的總和是:", total)
    alert("從 1 累加到 100 的總和是: " + str(total))</pre>
<p><a href='/get_page/w15/def addto(start, end):     total = sum(range(start, end + 1))     return total  def add_only_even(start, end):     # 只累加偶數     total = sum(i for i in range(start, end + 1) if i % 2 == 0)     return total  def run_addition():     total = addto(1, 100)     print("從 1 累加到 100 的總和是:", total)     alert("從 1 累加到 100 的總和是: " + str(total))      even_total = add_only_even(1, 100)     print("從 1 累加到 100 只包含偶數的總和是:", even_total)     alert("從 1 累加到 100 只包含偶數的總和是: " + str(even_total))'>add_only_even</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(start, end):
    total = sum(range(start, end + 1))
    return total

def add_only_even(start, end):
    # 只累加偶數
    total = sum(i for i in range(start, end + 1) if i % 2 == 0)
    return total

def run_addition():
    total = addto(1, 100)
    print("從 1 累加到 100 的總和是:", total)
    alert("從 1 累加到 100 的總和是: " + str(total))

    even_total = add_only_even(1, 100)
    print("從 1 累加到 100 只包含偶數的總和是:", even_total)
    alert("從 1 累加到 100 只包含偶數的總和是: " + str(even_total))</pre>
<p><a href="/get_page/w15/def addto(start, end):     total = sum(range(start, end + 1))     return total  def add_only_even(start, end):     # 只累加偶數     total = sum(i for i in range(start, end + 1) if i % 2 == 0)     return total  def add_avoid_8(start, end):     # 只累加不包含 &quot;8&quot; 的整數     total = sum(i for i in range(start, end + 1) if '8' not in str(i))     return total  def run_addition():     total = addto(1, 100)     print(&quot;從 1 累加到 100 的總和是:&quot;, total)     alert(&quot;從 1 累加到 100 的總和是: &quot; + str(total))      even_total = add_only_even(1, 100)     print(&quot;從 1 累加到 100 只包含偶數的總和是:&quot;, even_total)     alert(&quot;從 1 累加到 100 只包含偶數的總和是: &quot; + str(even_total))      avoid_8_total = add_avoid_8(1, 100)     print(&quot;從 1 累加到 100 避開包含數字 8 的總和是:&quot;, avoid_8_total)     alert(&quot;從 1 累加到 100 避開包含數字 8 的總和是: &quot; + str(avoid_8_total))">add_avoid_8</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(start, end):
    total = sum(range(start, end + 1))
    return total

def add_only_even(start, end):
    # 只累加偶數
    total = sum(i for i in range(start, end + 1) if i % 2 == 0)
    return total

def add_avoid_8(start, end):
    # 只累加不包含 "8" 的整數
    total = sum(i for i in range(start, end + 1) if '8' not in str(i))
    return total

def run_addition():
    total = addto(1, 100)
    print("從 1 累加到 100 的總和是:", total)
    alert("從 1 累加到 100 的總和是: " + str(total))

    even_total = add_only_even(1, 100)
    print("從 1 累加到 100 只包含偶數的總和是:", even_total)
    alert("從 1 累加到 100 只包含偶數的總和是: " + str(even_total))

    avoid_8_total = add_avoid_8(1, 100)
    print("從 1 累加到 100 避開包含數字 8 的總和是:", avoid_8_total)
    alert("從 1 累加到 100 避開包含數字 8 的總和是: " + str(avoid_8_total))</pre>
<p>隨堂考 <a href="/get_page/w15/def add_avoid_3_and_8(start, end):     # 累加範圍內不包含數字 &quot;3&quot; 或 &quot;8&quot; 的數字     total = sum(i for i in range(start, end + 1) if '3' not in str(i) and '8' not in str(i))     return total  # 直接計算並顯示結果 total = sum(range(1, 101)) print(&quot;從 1 累加到 100 的總和是:&quot;, total)  avoid_3_and_8_total = add_avoid_3_and_8(1, 100) print(&quot;從 1 累加到 100 避開包含數字 3 或 8 的總和是:&quot;, avoid_3_and_8_total)">add_avoid_3_and_8</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_avoid_3_and_8(start, end):
    # 累加範圍內不包含數字 "3" 或 "8" 的數字
    total = sum(i for i in range(start, end + 1) if '3' not in str(i) and '8' not in str(i))
    return total

# 直接計算並顯示結果
total = sum(range(1, 101))
print("從 1 累加到 100 的總和是:", total)

avoid_3_and_8_total = add_avoid_3_and_8(1, 100)
print("從 1 累加到 100 避開包含數字 3 或 8 的總和是:", avoid_3_and_8_total)</pre>
<p>答案:5050</p>
<h2>w14_ex</h2>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload = function() { 
    brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']}); 
}
</script>
</p>
<!-- 定義顯示 canvas 的 div 元素 -->
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    # 創建一個 canvas 元素，並設置其寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    # 將創建的 canvas 元素添加到指定的 HTML div 元素中
    brython_div = doc[id]  # 獲取指定 id 的 div 元素
    brython_div <= canvas  # 將 canvas 插入到該 div 中

    # 獲取 canvas 的 2D 繪圖上下文，這是進行繪圖的主要接口
    ctx = canvas.getContext("2d")

    # 返回畫布和它的 2D 繪圖上下文
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    """
    生成一個隨機的 RGB 顏色字符串。
    返回的顏色是 "rgb(r, g, b)" 格式，其中 r, g, b 是 0 到 255 之間的隨機整數。
    """
    r = random.randint(0, 255)  # 隨機生成紅色成分 (0-255)
    g = random.randint(0, 255)  # 隨機生成綠色成分 (0-255)
    b = random.randint(0, 255)  # 隨機生成藍色成分 (0-255)
    return f"rgb({r}, {g}, {b})"  # 返回隨機顏色字符串

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    """
    判斷一個點 (px, py) 是否位於圓 (cx, cy, r) 內。
    (cx, cy) 為圓心坐標，r 為圓的半徑。
    """
    # 使用圓的方程 (px - cx)² + (py - cy)² <= r² 判斷點是否在圓內
    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2

# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    """
    根據傳入的三個圓的圓心和半徑，繪製圓形並使用掃描線算法填充區域。
    x1, y1, r1 是圓1的圓心坐標和半徑
    x2, y2, r2 是圓2的圓心坐標和半徑
    x3, y3, r3 是圓3的圓心坐標和半徑
    """
    # 初始化畫布，創建並取得畫布和其 2D 上下文
    canvas, ctx = initialize_canvas(400, 400)

    # 清空畫布，以便重新繪製
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    # 顏色區域存儲字典，存儲不同區域的顏色
    color_dict = {}

    # 使用掃描線方法填充區域，逐行掃描畫布上的每個像素
    for py in range(0, canvas.height):  # 遍歷每一行的 y 坐標
        for px in range(0, canvas.width):  # 遍歷每一列的 x 坐標
            # 判斷該點是否在圓內
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)

            if in_circle1 and in_circle2 and in_circle3:
                # 三圓交集區域
                if "intersection_all" not in color_dict:
                    color_dict["intersection_all"] = random_color_generator()
                current_color = color_dict["intersection_all"]
            elif in_circle1 and in_circle2:
                # 圓1與圓2交集區域
                if "intersection_12" not in color_dict:
                    color_dict["intersection_12"] = random_color_generator()
                current_color = color_dict["intersection_12"]
            elif in_circle1 and in_circle3:
                # 圓1與圓3交集區域
                if "intersection_13" not in color_dict:
                    color_dict["intersection_13"] = random_color_generator()
                current_color = color_dict["intersection_13"]
            elif in_circle2 and in_circle3:
                # 圓2與圓3交集區域
                if "intersection_23" not in color_dict:
                    color_dict["intersection_23"] = random_color_generator()
                current_color = color_dict["intersection_23"]
            elif in_circle1:
                # 圓1區域
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 圓2區域
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                # 圓3區域
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                # 背景
                current_color = "white"

            # 設置當前像素的顏色並進行填充
            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素

# 直接設定圓心和相同的半徑
radius = 100
x1, y1, r1 = 150, 200, radius  # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, radius  # 圓2：圓心 (250, 200)，半徑 100
x3, y3, r3 = 200, 100, radius  # 圓3：圓心 (200, 100)，半徑 100

# 呼叫畫圓函式，並繪製三個圓
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)
</script>
</p>
<h1>HW 2</h1>
<h2>HW 2 Exam</h2>
<h3>w16_exam1</h3>
<p><img alt="" src="https://youtu.be/8wfMsMqC1tA"/>影片:<a href="https://youtu.be/8wfMsMqC1tA">https://youtu.be/8wfMsMqC1tA</a></p>
<p><a href="https://gist.githubusercontent.com/41323125/ed043b05a5260caa6411b08ba2c7a28a/raw/4a2f314eb35c8e3a858a8f3913e9e8784fafb00d/w16exam_1">程式</a><img alt="" src="https://youtu.be/8wfMsMqC1tA"/><img alt="" src="https://youtu.be/8wfMsMqC1tA"/><img alt="" src="https://youtu.be/8wfMsMqC1tA"/></p>
<p><br/><br/></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload = function() { 
    brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']}); 
}
</script>
</p>
<!-- 定義顯示 canvas 的 div 元素 -->
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import math

# 初始化畫布
def initialize_canvas():
    canvas = html.CANVAS(width=600, height=600)
    brython_div = doc["brython_div1"]
    brython_div <= canvas
    ctx = canvas.getContext("2d")
    ctx.fillStyle = 'white'
    ctx.fillRect(0, 0, 600, 600)  # 填充整個畫布為白色
    return canvas, ctx

# 繪製六邊形
def draw_hexagon(ctx, x, y, size, color):
    """繪製六邊形"""
    ctx.beginPath()
    for i in range(6):
        angle = math.pi / 3 * i
        x_pos = x + size * math.cos(angle)
        y_pos = y + size * math.sin(angle)
        if i == 0:
            ctx.moveTo(x_pos, y_pos)
        else:
            ctx.lineTo(x_pos, y_pos)
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製菱形
def draw_diamond(ctx, x, y, width, height, color):
    """繪製菱形"""
    ctx.beginPath()
    ctx.moveTo(x, y - height / 2)
    ctx.lineTo(x + width / 2, y)
    ctx.lineTo(x, y + height / 2)
    ctx.lineTo(x - width / 2, y)
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製等腰三角形
def draw_isosceles_triangle(ctx, x, y, base, height, color):
    """繪製等腰三角形"""
    half_base = base / 2
    # 三角形的三個頂點
    ctx.beginPath()
    ctx.moveTo(x - half_base, y)  # 左下角
    ctx.lineTo(x + half_base, y)  # 右下角
    ctx.lineTo(x, y - height)     # 上頂點
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製圓形
def draw_circle(ctx, x, y, radius, color):
    """繪製圓形"""
    ctx.beginPath()
    ctx.arc(x, y, radius, 0, 2 * math.pi)
    ctx.fillStyle = color
    ctx.fill()

# 繪製矩形
def draw_rectangle(ctx, x, y, width, height, color):
    """繪製矩形"""
    ctx.beginPath()
    ctx.rect(x, y, width, height)
    ctx.fillStyle = color
    ctx.fill()

# 標註原點
def mark_origin(ctx, x, y):
    """標註原點 (31, 25)"""
    ctx.fillStyle = "black"
    ctx.font = "16px Arial"
    ctx.fillText(f"({x}, {y})", x + 10, y - 10)

# 繪製坐標軸 (從原點 (31, 25) 開始)
def draw_axes(ctx, origin_x, origin_y):
    """繪製 X 軸和 Y 軸，並標示正方向"""
    # X 軸 (向右為正)
    ctx.beginPath()
    ctx.moveTo(origin_x, origin_y)  # 從原點 (31, 25) 開始
    ctx.lineTo(600, origin_y)  # 直到畫布的右側 (X=600)，Y 不變
    ctx.lineWidth = 2  # 設定線條寬度
    ctx.strokeStyle = "black"
    ctx.stroke()

    # Y 軸 (向下為正)
    ctx.beginPath()
    ctx.moveTo(origin_x, origin_y)  # 從原點 (31, 25) 開始
    ctx.lineTo(origin_x, 300)  # 直到畫布的下側 (Y=600)，X 不變
    ctx.stroke()

    # 標註 X 軸的箭頭 (向右為正)
    ctx.beginPath()
    ctx.moveTo(590, origin_y - 10)  # X 軸末端的箭頭起點
    ctx.lineTo(600, origin_y)
    ctx.lineTo(590, origin_y + 10)
    ctx.stroke()

    # 標註 Y 軸的箭頭 (向下為正)
    ctx.beginPath()
    ctx.moveTo(origin_x - 10, 290)  # Y 軸末端的箭頭起點
    ctx.lineTo(origin_x, 300)
    ctx.lineTo(origin_x + 10, 290)
    ctx.stroke()

    # 標註 X 軸的文字
    ctx.fillStyle = "black"
    ctx.font = "16px Arial"
    ctx.fillText("X", 570, origin_y + 20)  # 標註 X 軸

    # 標註 Y 軸的文字，移動到箭頭右側
    ctx.fillText("Y", origin_x + 15, 300 - 30)  # 移動 Y 標註位置

# 繪製場景
def draw_scene():
    """繪製場景"""
    canvas, ctx = initialize_canvas()

    origin_x, origin_y = 31, 25  # 原點坐標 (31, 25)

    # 標註原點 (31, 25)
    mark_origin(ctx, origin_x, origin_y)

    # 繪製坐標軸 (從原點 (31, 25) 開始)
    draw_axes(ctx, origin_x, origin_y)

    # 六邊形的大小
    hexagon_size = 50

    # 計算六邊形的中心點 X 座標，使最左側頂點對齊於 X = 31
    hexagon_x = 31 + hexagon_size  # 六邊形的中心 X 座標

    # 繪製六邊形
    draw_hexagon(ctx, hexagon_x, 180, hexagon_size, "orange")

    # 繪製菱形，調整位置
    diamond_x = 180
    draw_diamond(ctx, diamond_x, 180, 80, 120, "teal")

    # 繪製縮小的等腰三角形，放置於菱形底部對齊但不重疊，調整位置
    base = 60  # 三角形底邊長度
    height = 50  # 根據底邊長度調整高度
    triangle_x = diamond_x + 60 / 2 + 10
    draw_isosceles_triangle(ctx, triangle_x, 180 + 60, base, height, "lightpink")

    # 繪製圓形，調整位置
    circle_x = 280
    draw_circle(ctx, circle_x, 180, 50, "magenta")

    # 繪製正方形，調整位置
    square_x = 340
    draw_rectangle(ctx, square_x, 140, 80, 80, "yellow")

    # 繪製矩形，調整位置
    rectangle_x = 440
    draw_rectangle(ctx, rectangle_x, 160, 100, 40, "blue")

# 開始繪製
draw_scene()
</script>
</p><h1>HW 3</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<h3>w16_exam2</h3>
<p>影片:<a href="https://youtu.be/DDsx6w0UTSo">https://youtu.be/DDsx6w0UTSo</a></p>
<p><a href="https://gist.githubusercontent.com/41323125/0bdd97764a714982ef4ae0a57d280cf0/raw/d62cc9f78e2730189885d1623963ab1b326b8d73/w16_exam2">程式</a></p>
<p>心得:我用了ChatGPT，請它幫我編編寫程式畫出圖形外圍，再自行修改當中的變數調整間距，延續編寫方式完成這題。</p>
<p><a href="https://gist.githubusercontent.com/41323125/0bdd97764a714982ef4ae0a57d280cf0/raw/d62cc9f78e2730189885d1623963ab1b326b8d73/w16_exam2"> <!-- 導入 brython 程式庫 --></a></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p><a href="https://gist.githubusercontent.com/41323125/0bdd97764a714982ef4ae0a57d280cf0/raw/d62cc9f78e2730189885d1623963ab1b326b8d73/w16_exam2"><!-- 啟動 Brython --></a></p>
<p>
<script>
window.onload = function() { 
    brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']}); 
}
</script>
</p>
<p><a href="https://gist.githubusercontent.com/41323125/0bdd97764a714982ef4ae0a57d280cf0/raw/d62cc9f78e2730189885d1623963ab1b326b8d73/w16_exam2"><!-- 定義顯示 canvas 的 div 元素 --></a></p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc

# 初始化畫布
def initialize_canvas():
    canvas = html.CANVAS(width=1000, height=1000)  # 調整畫布大小為 1000x1000
    brython_div = doc["brython_div1"]
    brython_div <= canvas
    ctx = canvas.getContext("2d")
    ctx.fillStyle = 'white'
    ctx.fillRect(0, 0, 1000, 1000)  # 填充整個畫布為白色
    return canvas, ctx
 
# 繪製迷宮
def draw_maze(ctx):
    # 設定線條樣式
    ctx.lineWidth = 2  # 線條寬度為 2px
    ctx.strokeStyle = "blue"  # 線條顏色為藍色

    # 定義迷宮線條（根據圖片）
    lines = [
        # 外框
        ((100, 100), (450, 100)),  # 上左邊
        ((550, 100), (900, 100)),  # 上右
        ((100, 100), (100, 900)),  # 左邊
        ((900, 100), (900, 900)),  # 右邊
        ((100, 900), (450, 900)),  # 左下
        ((550, 900), (900, 900)),  # 右下
       
        # 內部垂直線
        ((400, 250), (400, 400)),
        ((750, 250), (750, 400)),
        ((450, 750), (450, 900)),
        ((750, 600), (750, 900)),
        ((300, 600), (300, 750)),
        ((575, 400), (575, 600)),
        
        # 內部水平線
        ((250, 250), (750, 250)),
        ((100, 400), (400, 400)),
        ((450, 750), (600, 750)),
        ((300, 600), (750, 600)),
    ]

    # 繪製所有線條
    for start, end in lines:
        ctx.beginPath()
        ctx.moveTo(*start)
        ctx.lineTo(*end)
        ctx.stroke()

    # 用紅色標示左上角起始點
    ctx.fillStyle = "red"
    ctx.font = "20px Arial"
    ctx.fillText("(31, 25)", 110, 90)

# 主程式
canvas, ctx = initialize_canvas()
draw_maze(ctx)
</script>
</p><h1>HW 4</h1>
<p></p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p><!-- 導入 brython 程式庫 --></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p><!-- 啟動 Brython --></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<p><!-- editor1 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<p><!-- editor1 結束 --></p>
<hr/>
<p><!-- ########################################## --></p>
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<p><!-- editor2 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<p><!-- editor2 結束 --></p>
<hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>